=begin
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
=end
#######################################################################################

require "prime"

# method returns smallest triangle number to have more divisors than provided argument
def highly_divisible_triangle_number(min_divisors)
	#stores most recent triangle number
	last_triangle = 0

	#check each triangle number until finding one with more than min number of divisors
	(1..Float::INFINITY).each do |n|
		#get next triangle number
		last_triangle += n

		return last_triangle if find_qty_of_divisors(last_triangle) > min_divisors
	end
end

# method returns the number of divisors of num
def find_qty_of_divisors(num)
	#get prime factors of num
	prime_factors = prime_factorize(num)
	# handle num == 1
	return 1 if prime_factors.empty?

	exponents = prime_factors.values
	# formula for number of divisors according to e.g. http://primes.utm.edu/glossary/xpage/tau.html
	exponents.inject(1){|memo, exponent| memo * (exponent + 1)}
end

# method returns a hash of prime factors of a num. (Returns same value as Hash[num.prime_division], but I was unaware of #prime_division at the time I worked this problem)
def prime_factorize(num_input)
	# copy input since num will be modified
	num = num_input
	prime_factors = Hash.new(0)
	Prime.each do |prime|
		until num % prime != 0 # until num is no longer divisible by current prime
			prime_factors[prime] += 1
			num /= prime
		end
		break if num == 1 # break if all prime factors have been pulled out
	end
	prime_factors
end

p highly_divisible_triangle_number(500) #=> 76576500
